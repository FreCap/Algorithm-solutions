#include <iostream>#include <algorithm>#include <math.h>#include <vector>#include <string>#include <utility>#include <stdio.h>#include <queue>#include <fstream>#include <functional>#include <cstdlib>#include <map>#include <set>#define MIN(a,b) (((a)<(b))?(a):(b))#define MAX(a,b) (((a)>(b))?(a):(b))#define MAX_N 1000010using namespace std;typedef pair<int, int> ii;typedef vector< ii > vii;typedef vector<int> vi;int N, S;int a[MAX_N];int main() {    cin >> N >> S;    int max = 0, val;    for (int i = 0; i < N; i++)        cin >> a[i];    int sum = 0, ans = 0, indexStop = 0, indexStart = 0;    for (int i = 0; i < N; i++) {        sum += a[i];        if (ans < sum) {            ans = sum;            indexStop = i;        }        if (sum < 0) sum = 0;    }    int sum2 = 0, count = 0;    priority_queue<int, vector<int>, greater<int> > s;    priority_queue<int> sMax;    for (indexStart = indexStop; indexStart>=0 && (sum2 != ans || count == 0); indexStart--) {        s.push(a[indexStart]);        sum2 += a[indexStart];        count++;    }    ans = sum2;    for (int i = 0; i <= indexStart; i++)        sMax.push(a[i]);    for (int i = indexStop + 1; i < N; i++)        sMax.push(a[i]);    int i;    for (i = 0; i < S && !sMax.empty(); i++) {        int best = sMax.top();        sMax.pop();        int worst = s.top();        s.pop();        if (worst < best) {			if(worst<0)            	ans = ans - worst;            ans = ans + best;        }        if (sMax.empty()) break;        if (s.empty()) break;    }    for (; i < S && count > 1 && !s.empty(); i++) {        int worst = s.top();        s.pop();		if(worst>0)break;        ans = ans - worst;        count--;    }    cout << ans;    return 0;}