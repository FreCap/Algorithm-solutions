
#define MAX_N 1010
#define MAX_W 40

int N, MW, V[MAX_N], W[MAX_N], memo[MAX_N][MAX_W];

int value(int id, int w) {
  if (id == N || w == 0) return 0;
  if (memo[id][w] != -1) return memo[id][w];
  if (W[id] > w)         return memo[id][w] = value(id + 1, w);
  return memo[id][w] = max(value(id + 1, w), V[id] + value(id + 1, w - W[id]));
}

int main() {
  int i, T, G, ans;

  scanf("%d", &T);
  while (T--) {
    memset(memo, -1, sizeof memo);

    scanf("%d", &N);
    for (i = 0; i < N; i++)
      scanf("%d %d", &V[i], &W[i]);

    ans = 0;
    scanf("%d", &G);
    while (G--) {
      scanf("%d", &MW);
      ans += value(0, MW);
    }

    printf("%d\n", ans);
  }

  return 0;
}



int N = 5, V, coinValue[5] = {1, 5, 10, 25, 50}, memo[6][7500];
// N and coinValue are fixed for this problem, max V is 7489

int ways(int type, int value) {
  if (value == 0)              return 1;
  if (value < 0 || type == N)  return 0;
  if (memo[type][value] != -1) return memo[type][value];
  return memo[type][value] = ways(type + 1, value) + ways(type, value - coinValue[type]);
}

int main() {
  memset(memo, -1, sizeof memo); // we only need to initialize this once
  while (scanf("%d", &V) != EOF)
    printf("%d\n", ways(0, V));

  return 0;
}





LCS(S,n,T,m){
    if (n==0 || m==0) return 0;
    if (S[n] == T[m]) result = 1 + LCS(S,n-1,T,m-1); // no harm in matching up
    else result = max( LCS(S,n-1,T,m), LCS(S,n,T,m-1) );
    return result;
}


LCS(S,n,T,m)
{
    if (n==0 || m==0) return 0;
    if (arr[n][m] != unknown) return arr[n][m]; // <- added this line (*)
    if (S[n] == T[m]) result = 1 + LCS(S,n-1,T,m-1);
    else result = max( LCS(S,n-1,T,m), LCS(S,n,T,m-1) );
    arr[n][m] = result; // <- and this line (**)
    return result;
}


