## Lezione 7 ##

DINAMICA
- è riconoscere quali sono i parametri;

#### FIBONACCI ####


O(2^n) naive -> O(n) DP

// se lo dichiari al di fuori della func, sarà sempre = 0
int memo[NX];

int fib(int n){
    if(n==0) return 0;
    if(n==1) return 1;
    if(memo[n] != 0) return memo[n];
    return memo[n] = fib(n-1)+fib(n-2);
}


#### SOTTOSEQUENZA PIU' LUNGA ####

naive O(2^n)
 
anus
ajs9d8

->as

ciaa
ciao

  ciaa
  cia

    cia
    ci
    
      cia
      c
      
        cia
        (0)
        
        ci
        c
        
          ci
          (0)
          
          c
          c
          
            (0)
            (0)
      
      ci
      ci
      
        c
        c
        
          (0)
          (0)

  cia
  ciao
  
    cia
    cia
    
      
3

ciao
cioa
  0 => 3
  ciao
  cio
    
    +1 => 3
    cia
    ci
      
      +0  => 2
      cia
      ci
      
        +0
        cia
        c
          
          cia
          (0)
          
        2  
        ci
        ci
          +1
          c
          c
            
            +1
            (0)
            (0)
      
      0 => 2
      ci
      ci
      
        +1
        c
        c
        
          +1
          (0)
          (0)
   
   // ALTRO CASO    
   
   cio
   cia 
->anu

asdf
ghjk

char S,T;

int memo[SMAX][TMAX];

int lcs(int i, int k){
  if(i<0 || k<0) return 0;
  if(memo[i][k]!=-1 ) return memo[i][k];
  if(S[i]==T[k]) return memo[i][k] = 1+lcs(i-1, k-1);
  return memo[i][k] = max(lcs(i-1,k),lcs(i,k-1)); 
}


// funzione di cstring, funziona anche se è una matrice
memset(memo, -1, sizeof memo);
lcs(sS, sT);

O(sS, sT);

I parametri sono gli indici dell'array
Il significato è, il valore migliore che si può ottenere arrivando a quegli indici


#### ZAINO 0-1 ####

prendiamo in considerazione che abbiamo un numero
illimitato di oggetti

possibili parametri:
- peso 1k
- valore 1kk
- capienza 1k
- n oggetti  1k

-- dovrà restituire il valore massimo


N oggetti, Capienza
peso(i) valore(i)


3, 21
10 9
9 8
2 1
int w[NX], v[NX];

int memo[N][CAPIENZA];

int dp(int i, int capienza){
  if(capienza<0) return 0;
  if(i<0) return 0;
  if(memo[i][capienza] != -1) return memo[i][capienza];
  if(capienza>=w[i]) 
    memo[i][capienza] = v[i]+dp(i, capienza - w[i]);
  return memo[i][capienza] = max(memo[i][capienza],dp(i-1, capienza));
}

5 10
1 1
1 1
1 1
1 1
1 1

- i -> il risultato migliore prendendo tt gli oggetti fino ad i
- capienza -> il ris mig con la determinata capienza

dp(N-1, CAPIENZA);

#### CAMBIO ####

5 18
1
2
5
10
20

In quanti modi possiamo dare il resto

- utilizzare tutte le monete fino ad i X
- utilizzare i monete 
- resto da dare X
- maniere in cui puoi dare il resto

NB: capire sempre se dati 2 parametri c'è una soluzione univoca

COSA RESTITUISCE:
- I MODI

int v[10]; // valori delle monete
int memo[N_MONETE,RESTO_MAX];

int dp(int i, int resto){
  if(i<0 || resto<0) return 0;
  if(resto==0) redrn 1;
  if(memo[i,resto]!=-1)  return memo[i,resto];
  return memo[i,resto] = dp(i-1, resto)+dp(i, resto-v[i]);
}

1) non hai più monete con cui dare il resto, il resto è <0, hai 0 modi
2) se il resto == 0, ossia è "preciso", hai un modo
3) - o senza prendere la moneta corrente, quindi nelle maniere con cui potevi far quel resto che avevi calcolato precedentemente,
   - o prendendo la moneta, e trovando i modi con cui puoi fare i resto-v[i]





















