## Lezione 10 ##

T: ciao io io io m chiam francesco ciao io io io mi chiamo francesco
S:io io io mi

T: iiiiiaiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii

S: iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
T: 12345


for(int i=0; i<T.size(); i++)
    for(int j=0;j<S.size(); j++)
        if(T[i+j]==S[j])
            ...
        else
            break;
    

char T[MAX_N], P[MAX_N]; // T = text, P = pattern
int b[MAX_N], n, m; // b = back table, n = length of T, m = length of P


b:


  i  j  b
S 0 -1 -1
E 1  0  0
V 2  0  0
E 3  0  0
N 4  0  0
T 5  0  0
Y 6  0  0
  7  0  0
S 8  1  1
E 9  2  2
V 10 3  3
E 11 4  4
N 12 5  5
SEVENTY SEVEN
SEVENTY SEVEANSEVENTY SEVEN
   
void kmpPreprocess() { // call this before calling kmpSearch()
  int i = 0, j = -1; b[0] = -1; // starting values
  while (i < m) { // pre-process the pattern string P
    while (j >= 0 && P[i] != P[j]) j = b[j]; // if different, reset j using b
    i++; j++; // if same, advance both pointers
    b[i] = j; // observe i = 8, 9, 10, 11, 12 with j = 0, 1, 2, 3, 4
} }           // in the example of P = "SEVENTY SEVEN" above

   i   j
S  0   0
E  1   1
S  2   0
E  3   1
V  4   2
E  5   3
N  6   4
T  7   5
Y  8   6
   9   7
S 10   8   
E 11   9
V 12  10 
E 13   4
A 13   0
N 


void kmpSearch() { // this is similar as kmpPreprocess(), but on string T
  int i = 0, j = 0; // starting values
  while (i < n) { // search through string T
    while (j >= 0 && T[i] != P[j]) j = b[j]; // if different, reset j using b
    i++; j++; // if same, advance both pointers
    if (j == m) { // a match found when j == m
      printf("P is found at index %d in T\n", i - j);
      j = b[j]; // prepare j for the next possible match
} } }


// 2esempio

iiiiia
iiia

   i  j  b
i  0 -1 -1 
i  1  0  0
i  2  1  1
a  3  2  2
i  4  3  0
i  5  4  1

   i  j
i  0  0
i  1  1
i  2  2
i  3  2
i  4  2
a  5  3
i  6  4
a  7  5

void kmpSearch() { // this is similar as kmpPreprocess(), but on string T
  int i = 0, j = 0; // starting values
  while (i < n) { // search through string T
    while (j >= 0 && T[i] != P[j]) j = b[j]; // if different, reset j using b
    i++; j++; // if same, advance both pointers
    if (j == m) { // a match found when j == m
      printf("P is found at index %d in T\n", i - j);
      j = b[j]; // prepare j for the next possible match
} } }







